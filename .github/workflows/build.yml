permissions:
  contents: write
name: Build Deen Release

on:
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: deen-linux-x86_64
            binary: deen
          - target: aarch64-apple-darwin
            os: macos-latest
            name: deen-macos-aarch64
            binary: deen
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: deen-windows-x86_64
            binary: deen.exe

    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        key: ${{ matrix.target }}

    # Linux dependencies
    - name: Install Linux dependencies
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y llvm-18-dev libclang-18-dev clang-18 libpolly-18-dev
        echo "LLVM_SYS_180_PREFIX=/usr/lib/llvm-18" >> $GITHUB_ENV

    # macOS dependencies
    - name: Install macOS dependencies
      if: matrix.os == 'macos-latest'
      run: |
        brew install llvm@18 zstd libffi
        LLVM_PREFIX=$(brew --prefix llvm@18)
        echo "LLVM_SYS_180_PREFIX=$LLVM_PREFIX" >> $GITHUB_ENV
        echo "LIBRARY_PATH=$LLVM_PREFIX/lib:$(brew --prefix zstd)/lib:$(brew --prefix libffi)/lib:$LIBRARY_PATH" >> $GITHUB_ENV
        echo "LD_LIBRARY_PATH=$LLVM_PREFIX/lib:$(brew --prefix zstd)/lib:$(brew --prefix libffi)/lib:$LD_LIBRARY_PATH" >> $GITHUB_ENV
        echo "PKG_CONFIG_PATH=$LLVM_PREFIX/lib/pkgconfig:$(brew --prefix zstd)/lib/pkgconfig:$(brew --prefix libffi)/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
        echo "RUSTFLAGS=-L$LLVM_PREFIX/lib" >> $GITHUB_ENV

    # Windows dependencies
    - name: Install Windows dependencies
      if: matrix.os == 'windows-latest'
      run: |
        choco install llvm --version=18.1.8 -y
        echo "LLVM_SYS_180_PREFIX=C:\Program Files\LLVM" >> $env:GITHUB_ENV

    - name: Build
      run: cargo build --release --target ${{ matrix.target }}

    - name: Prepare binary (Unix)
      if: matrix.os != 'windows-latest'
      run: |
        cp target/${{ matrix.target }}/release/${{ matrix.binary }} ${{ matrix.name }}
        chmod +x ${{ matrix.name }}

    - name: Prepare binary (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        copy target\${{ matrix.target }}\release\${{ matrix.binary }} ${{ matrix.name }}.exe

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.name }}
        path: ${{ matrix.name }}${{ matrix.os == 'windows-latest' && '.exe' || '' }}

  release:
    name: Create Draft Release
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare release assets
      run: |
        mkdir -p release-assets
        
        # Copy binaries and rename them properly
        cp artifacts/deen-linux-x86_64/deen-linux-x86_64 release-assets/deen
        cp artifacts/deen-macos-aarch64/deen-macos-aarch64 release-assets/deen-macos
        cp artifacts/deen-windows-x86_64/deen-windows-x86_64.exe release-assets/deen.exe
        
        # Copy additional files
        cp LICENSE release-assets/
        cp README.md release-assets/
        cp -r stdlib release-assets/
        
        # Make binaries executable
        chmod +x release-assets/deen
        chmod +x release-assets/deen-macos

    - name: Generate tag name
      id: tag
      run: |
        TIMESTAMP=$(date +"%Y%m%d%H%M%S")
        TAG="release-${TIMESTAMP}"
        echo "tag=${TAG}" >> $GITHUB_OUTPUT

    - name: Create Draft Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ steps.tag.outputs.tag }}
        name: "Deen Compiler Release ${{ steps.tag.outputs.tag }}"
        draft: true
        generate_release_notes: true
        files: |
          release-assets/deen
          release-assets/deen-macos
          release-assets/deen.exe
          release-assets/LICENSE
          release-assets/README.md
          release-assets/stdlib/**
